# 4.7 配列をもっと詳しく
# 配列[取得する長さ]
a = [1,2,3,4,5]
p a[1,3]
p a.values_at(0,2,4)
p a[a.size - 1]
p a[-1]
p a[-2]
p a[-2, 2]
p a.last
p a.last(2)
p a.first
p a.first(2)

# 4.7.2
b = [1,2,3,4,5]
b[-3] = 10 #=> 後ろから3要素目を10に置き換える
p b

c = [1,2,3,4,5]
c[1, 3] = 100 #=> 2つ目から3要素分を100に置き換える
p c

d = []
d << 2
d.push(1,2,3) #=> 複数の要素を末尾に追加
p d

e = [1,2,3,1,2,3]
p e.delete(2) #=> 削除した値が戻り値になる
p e #=> [1,3,1,3]

# 4.7.3 配列の連結
a = [1]
b = [2,3]
# こわい
a.concat(b) #=> [1,2,3]
p a #=> 変更される（破壊的）
p b #=> 変更されない

a = [1]
b = [2,3]
# なるべくこっち
a + b #=> [1,2,3]
p a #=> 変更されない
p b #=> 変更されない

# 4.7.4 配列の和集合、差集合、積集合
a = [1,2,3]
b = [3,4,5]
# どれも非破壊的
p a | b #=> 和集合(|)
p a - b #=> 差集合(-) 右の配列から左の配列に含まれる要素を取り除く
p a & b #=> 積集合(&) 2つの配列に共通する要素を返す

# ※本格的な集合演算をする場合はSetクラスを使用する。効率的
require 'set'

a = Set.new([1,2,3])
b = Set.new([3,4,5])
p a | b
p a - b
p a & b

# 4.7.5 多重代入で残りの全要素を配列として受け取る
e,*f = 100, 200, 300
p e
p f

# 4.7.6 1つの配列を複数の引数として展開する
a = []
a.push(1)
a.push(2,3)
p a

a = []
b = [2,3]
a.push(1)
a.push(b) #=> [1,[2,3]]
p a

# 1つの配列、ではなく複数の引数として渡すには * をつける
# *で配列を展開できる
a = []
b = [2,3]
a.push(1)
a.push(*b) #=> [1,2,3]
p a

# 4.7.7 メソッドの可変長引数
# 個数に制限のない引数のこと = 可変長引数
def メソッド名(引数1, 引数2, *可変長引数) #=> * つける
  # メソッドの処理
end
# 可変長引数は配列として受け取れる
def greeting(*name)
  "#{name.join('と')}、こんにちは"
end
p greeting('田中さん')
p greeting('田中さん', '鈴木さん')
p greeting('田中さん', '鈴木さん', '佐藤さん')

# 4.7.8 * で配列同士を非破壊的に連結する
a = [1,2,3]
p [a] #=> [[1, 2, 3]] 配列の配列になる
p [*a] #=> 展開されて別の要素になる

a = [1,2,3]
b = [-1, 0, *a, 1, 2, 3]
p b
# + でもできるけど* のほうが完結
c = [-1,0] + a + [1,2,3]
p c

# 4.7.9 == で等しい配列かどうか判断する
p [1,2,3] == [1,2,3]
p [1,2,3] == [1,2,4]
p [1,2,3] == [1,2,3,4]

# 4.7.10 %で文字列の配列を完結に作る
# % %w %W
p ['apple','melon','orange']
p %w!apple melon orange!
p %w(apple melon orange)
p %w(big\ apple small\ melon large\ orange)
# 式展開や　改行、タブ文字を入れたい場合は大文字のW
prefix = 'This is'
puts %W(#{prefix}\ an\ apple small\nmelon big\torange)

# 4.7.11 文字列を配列に変換する
# charsメソッドとsplitメソッド
p 'Ruby'.chars
p 'Ruby,Java,Perl,PHP'.split(',')

# 4.7.12 配列に初期値を設定する
# []ではなくArray.new
a = Array.new(5)
p a #=> [nil, nil, nil, nil, nil]
b = Array.new(5, 0)
p b #=> [0, 0, 0, 0, 0]
# ブロックを使って初期値を設定
c = Array.new(10) {|n| n % 3 + 1}
p c

# 4.7.13 配列に初期値を設定する場合の注意点
a = Array.new(5, 'default') #=> 要素が5つで初期値defaultの配列
str = a[0] #=> 初期値を取得
str.upcase! #=> 1番目[0]の要素を大文字に変換
p a #=> 全て大文字になってる！！

# 配列の全要素が同じ文字列のオブジェクトを参照しているために発生した
# 回避のためにはブロックで初期値を渡すべし
a = Array.new(5) { 'default' }
p a
str = a[0]
str.upcase!
p a #=> 先頭の要素のみ大文字に！

