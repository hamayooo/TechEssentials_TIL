# 正規表現と一緒に使うと便利なStringクラスのメソッド
# - scan マッチすると配列に入れて返す
p '123 456 789'.scan(/\d+/) #=> ["123", "456", "789"]
p '1977年7月17日 2016年12月31日'.scan(/(\d+)年(\d+)月(\d+)日/) #=> [["1977", "7", "17"], ["2016", "12", "31"]]
# グループ化はしたいがキャプチャはしたくない場合は(?:)
p '1977年7月17日 2016年12月31日'.scan(/(?:\d+)年(?:\d+)月(?:\d+)日/) #=> ["1977年7月17日", "2016年12月31日"]
p '1977年7月17日 2016年12月31日'.scan(/\d+年\d+月\d+日/) #=> 簡単に書く["1977年7月17日", "2016年12月31日"]

# - [], slice, slice! 文字列から正規表現にマッチした部分を抜き出す
text = '郵便番号は123-4567'
p text[/\d{3}-\d{4}/] #=> "123-4567"
text = '123-3456 345-4678'
p text[/\d{3}-\d{4}/]  #=> "123-3456" マッチした最初の文字列が帰る

# キャプチャを使うと第２引数で取得するキャプチャを指定できる
text = '誕生日は1977年7月17日です'
p text[/(\d+)年(\d+)月(\d+)日/] #=> "1977年7月17日"
p text[/(\d+)年(\d+)月(\d+)日/, 3] #=> "17"

# 名前付きキャプチャであれば名前で指定することもできる
text = '誕生日は1977年7月17日です'
p text[/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, :day] #=> 17
p text[/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, 'day'] #=> 17

# sliceメソッドは[]のエイリアスメソッド
text = '郵便番号は123-4567'
p text.slice(/\d{3}-\d{4}/) #=> "123-4567"

text = '誕生日は1977年7月17日です'
p text.slice(/(\d+)年(\d+)月(\d+)日/, 3) #=> "17"

# slice!にすると破壊的に取り除かれる
text = '郵便番号は123-4567です'
p text.slice!(/\d{3}-\d{4}/) #=> "123-4567"
p text #=> "郵便番号はです"

# split
text = '123,456-789'
p text.split(',') #=> ["123", "456-789"]
p text.split(/,|-/) #=> ["123", "456", "789"]

# gsub, gsub! 第二引数の文字列で置き換える
text = '123,456-789'
p text.gsub(',', ':') #=> "123:456-789"
p text.gsub(/,|-/, ':') #=> "123:456:789"