# 正規表現
# ・ハッシュ変換プログラムを作る
# => を使う記法で書いた文字列を=>を使わない記法に書き換える

# 正規表現のなんたるかはQiitaで学べ！笑 その1~4
# https://qiita.com/jnchito/items/893c887fbf19e17d3ff9
# https://qiita.com/jnchito/items/64c3fdc53766ac6f2008
# https://qiita.com/jnchito/items/6f0c885c1c4929092578
# https://qiita.com/jnchito/items/b0839f4f4651c29da408

regex = /\d{3}-\d{4}/
p regex.class #=> Regexp

# =~:マッチした場合はマッチした文字列の開始位置が返る（true）
p '123-4567' =~  /\d{3}-\d{4}/ #=> 0

# マッチしない場合はnil
p 'hello' =~  /\d{3}-\d{4}/ #=> nil

# if文などでよく使う
if '123-4567' =~ /\d{3}-\d{4}/
  puts 'マッチしました'
else
  puts 'マッチしませんでした'
end

# !~:マッチしなければtrue
p 'hello' !~  /\d{3}-\d{4}/ #=> true
p '123-4567' !~  /\d{3}-\d{4}/ #=> false

# Rubularでいろいろと
# https://rubular.com/

# 正規表現のキャプチャを利用する
text = '私の誕生日は1977年7月17日です'
m = /(\d+)年(\d+)月(\d+)日/.match(text)
p m[0] #=> "1977年7月17日"
p m[1] #=> "1977"
p m[2] #=> "7"
p m[3] #=> "17"

# 処理結果を配列と同じような方法で取得
p m[2,2] #=> ["7", "17"]
p m[-1] #=> "17"
p m[1..3] #=> ["1977", "7", "17"]

# matchメソッドはStringクラスとRegexpクラスの両方に定義されてる。文字列と正規表現オブジェクトを入れ替えても同じ様に動く
text = '私の誕生日は1977年7月17日です'
m = text.match(/(\d+)年(\d+)月(\d+)日/)
p m #=> #<MatchData "1977年7月17日" 1:"1977" 2:"7" 3:"17">

# ?<name> メタ文字を使って名前をつける
text = '私の誕生日は1977年7月17日です'
m = /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/.match(text)
# シンボルで名前を指定してキャプチャの結果を取得
p m[:year] #=> "1977"
p m[:month] #=> "7"
p m[:day] #=> "17"
p m['year'] #=> "1977" 文字列もOK
p m[2] #=> "7" 連番も指定OK

# 左辺に正規表現リテラル、右辺に文字列を置いて=~演算子を使うとキャプチャの名前がローカル変数に割り当てられる
# - 右辺と左辺を入れ替えると使えない
# - 一旦変数に入れても使えない。直接左辺に置く
text = '私の誕生日は1977年7月17日です'
if /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/ =~ text
  puts "#{year}/#{month}/#{day}"
end #=> 1977/7/17

